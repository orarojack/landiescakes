// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(BUYER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  sellerProfile SellerProfile?
  orders        Order[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]
  notifications Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SellerProfile {
  id          String             @id @default(cuid())
  userId      String             @unique
  businessName String
  description String?            @db.Text
  address     String?
  phone       String?
  website     String?
  logo        String?
  status      SellerStatus       @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  frozen      Boolean            @default(false)
  freezeReason String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]

  @@map("seller_profiles")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  images      Json     // Array of image URLs
  categoryId  String
  sellerId    String
  stock       Int      @default(0)
  isActive    Boolean  @default(true)
  flashSale   Boolean  @default(false)
  isFeatured  Boolean  @default(false)
  averageRating Float  @default(0)
  reviewCount   Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      Category       @relation(fields: [categoryId], references: [id])
  seller        SellerProfile  @relation(fields: [sellerId], references: [id])
  orderItems    OrderItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]
  cartItems     CartItem[]

  @@map("products")
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  total         Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  shippingAddress Json      // Shipping address object
  paymentMethod String
  paymentStatus PaymentStatus @default(PENDING)
  
  // M-Pesa payment tracking
  mpesaMerchantRequestId String?
  mpesaCheckoutRequestId String?
  mpesaTransactionId     String?
  mpesaPhoneNumber       String?
  mpesaPaymentTimestamp  DateTime?
  
  // Customer info for guest checkout
  customerName           String?
  customerEmail          String?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@map("cart_items")
}

enum UserRole {
  ADMIN
  SELLER
  BUYER
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// SEED EXAMPLE: Accessories category for cake add-ons
// Run this SQL after migration to add the category:
// INSERT INTO Category (id, name, description, createdAt, updatedAt) VALUES (REPLACE_WITH_UUID, 'Accessories', 'Candles, toppers, knives, and other cake accessories', NOW(), NOW());
